Introduction : Les concepts autour de Java et les problèmes qu'il résout


Java est un langage de programmation orienté objet créé par Sun Microsystems en 1995. Il a été conçu pour répondre à plusieurs problématiques :


Portabilité : Java a été créé pour permettre aux développeurs d'écrire un code une fois et de l'exécuter sur n'importe quelle plateforme grâce à la machine virtuelle Java (JVM). Cela résout le problème de la dépendance à une architecture spécifique.
Sécurité : Java intègre des mécanismes de sécurité robustes, comme la gestion de la mémoire automatique (garbage collection) et la vérification des accès mémoire, pour éviter des erreurs courantes comme les fuites de mémoire.
Simplicité et lisibilité : Java est conçu pour être facile à apprendre et à utiliser, avec une syntaxe proche de C++ mais sans certaines complexités comme les pointeurs.


Java est largement utilisé dans le développement d'applications web, mobiles (Android), et d'entreprise.


La différence avec les autres langages


Python : Java est plus verbeux et nécessite une compilation, alors que Python est interprété et plus concis. Cependant, Java est généralement plus performant grâce à la JVM.




Les boucles en Java


Java propose plusieurs types de boucles :


Boucle for :


  for (int i = 0; i < 5; i++) {
      System.out.println("i = " + i);
  }


  Cette boucle exécute un bloc de code un nombre défini de fois.
Boucle while:
  int i = 0;
  while (i < 5) {
      System.out.println("i = " + i);
      i++;
  }


 Cette boucle exécute un bloc de code tant qu'une condition est vraie.


Boucle do-while :
  int i = 0;
  do {
      System.out.println("i = " + i);
      i++;
  } while (i < 5);


  Cette boucle exécute le bloc de code au moins une fois, puis répète tant que la condition est vraie.


Programmation orientée objet (POO) en Java


Qu'est-ce que la programmation orientée objet ? 
La POO est un paradigme de programmation qui organise le code autour d'objets, qui sont des instances de classes. Les concepts clés sont :


Classe: Un modèle ou un plan pour créer des objets.
Une classe regroupe un ensemble de données (qui peuvent être des variables primitives ou des objets) et un ensemble de méthodes de traitement de ces données et/ou de données extérieures à la classe. 


  class Voiture {
      String marque;
      int vitesse;


      void accelerer() {
          vitesse += 10;
      }
  }


Objet:  Un objet est une instance (anglicisme signifiant « cas » ou « exemple ») d’une classe et est référencé par une variable ayant un état (ou valeur). Un objet est une variable (presque) comme les autres. Il faut notamment qu’il soit déclaré avec son type.


  Voiture maVoiture = new Voiture();
  maVoiture.marque = "Toyota";
  maVoiture.accelerer();




Encapsulation : Utilisation de `public` et `private` pour contrôler l'accès aux attributs et méthodes.
 L’encapsulation de données dans un objet permet de cacher ou non leur existence aux autres objets du programme. Une donnée peut être déclarée en accès : 


* public : les autres objets peuvent accéder à la valeur de cette donnée ainsi que la modifier ; 3 Chapitre 1. Introduction au langage Java.


* privé : les autres objets n’ont pas le droit d’accéder directement à la valeur de cette donnée (ni de la modifier). En revanche, ils peuvent le faire indirectement par des méthodes de l’objet concerné (si celles-ci existent en accès public). 


  class Voiture {
      private String marque;


      public String getMarque() {
          return marque;
      }


      public void setMarque(String marque) {
          this.marque = marque;
      }
  }


Héritage : Une classe peut hériter des attributs et méthodes d'une autre classe.


  class Vehicule {
      String type;
  }


  class Voiture extends Vehicule {
      int roues = 4;
  }








Polymorphisme: Une méthode peut avoir plusieurs formes.
Le polymorphisme est un mécanisme important dans la programmation objet. Il permet de modifier le comportement d’une classe fille par rapport à sa classe mère. Le polymorphisme permet d’utiliser l’héritage comme un mécanisme d’extension en adaptant le comportement des objets.


  class Animal {
      void son() {
          System.out.println("Son d'animal");
      }
  }


  class Chien extends Animal {
      void son() {
          System.out.println("Woof!");
      }
  }


Les collections et les streams


Collections : 


Les List
il est possible de déclarer des tableaux en Java pour gérer un ensemble d’éléments. Cependant, ce type de structure reste limité : un tableau a une taille fixe (il est impossible d’ajouter ou d’enlever des éléments d’un tableau). De plus, il est souvent utile de disposer d’autres structures de données pour gérer des groupes d’éléments.


On appelle collections un ensemble de classes et d’interfaces fournies par l’API standard et disponibles pour la plupart dans le package java.util. Parmi ces collections, on trouve les listes (lists), les ensembles (sets) et les tableaux associatifs (maps). Elles forment ce que l’on appelle le Java Collections Framework.


il existe plusieurs class pour implémenter des une list
ArrayList, LinkedList, …
  List<String> liste = new ArrayList<String>();


liste.add("une première chaîne");
liste.add("une troisième chaîne");


System.out.println(liste.size()); // 2


// insertion d'un élément
liste.add(1, "une seconde chaîne");


System.out.println(liste.size()); // 3


for (String s : liste) {
  System.out.println(s);
}


String premierElement = liste.get(0);


System.out.println(liste.contains("une première chaîne")); // true
System.out.println(liste.contains("quelque chose qui n'est pas dans la liste")); // false


// suppression du dernier élément de la liste
liste.remove(liste.size() - 1);


// ajout de tous les éléments d'une autre liste à la fin de la liste
liste.addAll(Arrays.asList("une autre chaîne", "et encore une autre chaîne"));


System.out.println(liste.size()); // 4


// [une première chaîne, une seconde chaîne, une autre chaîne, et encore une autre chaîne]
System.out.println(liste);




List<String> liste = new LinkedList<String>();




liste.add("une première chaîne");
liste.add("une troisième chaîne");


System.out.println(liste.size()); // 2


// insertion d'un élément
liste.add(1, "une seconde chaîne");


System.out.println(liste.size()); // 3


for (String s : liste) {
  System.out.println(s);
}


String premierElement = liste.get(0);


System.out.println(liste.contains("une première chaîne")); // true
System.out.println(liste.contains("quelque chose qui n'est pas dans la liste")); // false


// suppression du dernier élément de la liste
liste.remove(liste.size() - 1);


// ajout de tous les éléments d'une autre liste à la fin de la liste
liste.addAll(Arrays.asList("une autre chaîne", "et encore une autre chaîne"));


System.out.println(liste.size()); // 4
System.out.println(liste);




Les ensembles (set)
Les ensembles (set) sont des collections qui ne contiennent aucun doublon. Deux élements e1 et e2 sont des doublons si :
e1.equals(e2) == true
ou si e1 vaut null et e2 vaut null. Pour contrôler l’unicité, le Java Collections Framework fournit trois implémentations : TreeSet, HashSet et LinkedHashSet.




Les tableaux associatifs (maps)
Un tableau associatif (parfois appelé dictionnaire) ou map permet d’associer une clé à une valeur. Un tableau associatif ne peut pas contenir de doublon de clés.
Les classes et les interfaces représentant des tableaux associatifs sont génériques et permettent de spécifier un type pour la clé et un type pour la valeur. Le Java Collections Framework fournit plusieurs implémentations de tableaux associatifs : TreeMap, HashMap, LinkedHashMap.




Streams :L’API streams a été introduite avec Java 8 pour permettre la programmation fonctionnelle. Un stream (flux) est une représentation d’une séquence sur laquelle il est possible d’appliquer des opérations. Cette API a deux principales intérêts :
1. Elle permet d’effectuer les opérations sur une séquence sans utiliser de structure de boucle. Cela permet de réaliser des traitements complexes tout en maintenant une bonne lisibilité du code.
2. Les opérations sur les streams sont réalisées en flux (d’où leur nom) ce qui limite l’empreinte mémoire nécessaire. Il est même possible de réaliser très simplement des traitements en parallèle pour tirer partie des possibilités d’une processeur multi-cœurs ou d’une machine multi-processeurs.
Création d’un stream
Un stream est représenté par une instance de l’interface générique Stream. On peut créer un Stream en utilisant un objet de type builder


  Stream<String> stream = Stream.<String>builder().add("Hello").add("World").build();
























La gestion des exceptions


La gestion des cas d’erreur représente un travail important dans la programmation. Les sources d’erreur peuvent être nombreuses dans un programme. Il peut s’agir :
* d’une défaillance physique ou logiciel de l’environnement d’exécution. Par exemple une erreur survient lors de l’accès à un fichier ou à la mémoire.
* d’un état atteint par un objet qui ne correspond pas à un cas prévu. Par exemple si une opération demande à positionner une valeur négative alors que cela n’est normalement pas permis par la spécification du logiciel.
* d’une erreur de programmation. Par exemple, un appel à une méthode est réalisé sur une variable dont la valeur est null.
* et bien d’autres cas encore…
Une exception est une classe Java qui représente un état particulier et qui hérite directement ou indirectement de la classe Exception. Par convention, le nom de la classe doit permettre de comprendre le type d’exception et doit se terminer par Exception.


Exemple de classes d’exception fournies par l’API standard :
NullPointerException
Signale qu’une référence null est utilisée pour invoquer une méthode ou accéder à un attribut.
NumberFormatException
Signale qu’il n’est pas possible de convertir une chaîne de caractères en nombre car la chaîne de caractère ne correspond pas à un nombre valide.
IndexOutOfBoundsException
Signale que l’on tente d’accéder à un indice de tableau en dehors des valeurs permises.
Pour créer sa propre exception, il suffit de créer une classe héritant de la classe java.lang.Exception.


package dev.gayerie.heroes;


public class FinDuMondeException extends Exception {


  public FinDuMondeException() {
  }


  public FinDuMondeException(String message) {
    super(message);
  }
}


Hiérarchie des exceptions :
 Throwable : La classe mère de toutes les exceptions.
 Error : Pour les erreurs graves (ex : `OutOfMemoryError`).
  Exception : Pour les exceptions vérifiées (ex : IOException) et non vérifiées (ex : NullPointerException).


Blocs try-catch-finally :
  try {
      int resultat = 10 / 0; // Division par zéro
  } catch (ArithmeticException e) {
      System.out.println("Erreur : Division par zéro");
  } finally {
      System.out.println("Bloc finally exécuté");
  }


Exceptions personnalisées :


  class MonException extends Exception {
      public MonException(String message) {
          super(message);
      }
  }


  void verifierAge(int age) throws MonException {
      if (age < 18) {
          throw new MonException("Age insuffisant");
      }
  }
Manipulation des fichiers (entrée/sortie)


Java fournit des classes pour lire et écrire des fichiers :
import java.io.*;


public class FichierExemple {
    public static void main(String[] args) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("fichier.txt"))) {
            writer.write("Bonjour, Java!");
        } catch (IOException e) {
            e.printStackTrace();
        }


        try (BufferedReader reader = new BufferedReader(new FileReader("fichier.txt"))) {
            String ligne;
            while ((ligne = reader.readLine()) != null) {
                System.out.println(ligne);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}




Notion des tests unitaires avec exemples


Les tests unitaires permettent de vérifier le bon fonctionnement d'une unité de code. JUnit est le framework le plus utilisé en Java.










import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;


class CalculatriceTest {
    @Test
    void testAddition() {
        Calculatrice calc = new Calculatrice();
        assertEquals(5, calc.additionner(2, 3));
    }
}


class Calculatrice {
    int additionner(int a, int b) {
        return a + b;
    }
}




Multithreading et comparaisons en Java


Le multithreading permet d'exécuter plusieurs threads simultanément. Java fournit des classes comme Thread et Runnable.


class MonThread extends Thread {
    public void run() {
        System.out.println("Thread en cours d'exécution");
    }
}


public class ExempleThread {
    public static void main(String[] args) {
        MonThread thread = new MonThread();
        thread.start();
    }
}


Comparaisons : Java utilise Comparable et Comparator pour trier des objets.


  class Personne implements Comparable<Personne> {
      String nom;
      int age;


      public int compareTo(Personne autre) {
          return this.age - autre.age;
      }
  }